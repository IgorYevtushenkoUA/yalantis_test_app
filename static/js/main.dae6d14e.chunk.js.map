{"version":3,"sources":["app/pages/main/components/employee/alphabet/list/empty/EmptyEmployeesList.js","app/pages/main/components/employee/alphabet/list/iter/EmployeeItem.js","app/pages/main/components/employee/alphabet/list/EmployeesList.js","app/pages/main/components/employee/alphabet/Alphabet.js","app/pages/main/components/employee/EmployeeSide.js","app/pages/main/components/birth/employeeMonth/item/EmployeeItem.js","app/pages/main/components/birth/employeeMonth/EmployeeMonth.js","app/pages/main/components/birth/BirthSide.js","app/pages/main/Main.js","app/pages/loading/Loading.js","app/utils/API.js","App.js","reportWebVitals.js","index.js"],"names":["EmptyEmployeesList","EmployeeItem","props","style","active","fontSize","fontWeight","color","employee","lastName","firstName","type","value","name","onChange","removeEmployee","checked","addEmployee","EmployeesList","console","log","employeesId","con","employees","map","includes","id","Alphabet","letter","toUpperCase","EmployeeSide","display","justifyContent","gridTemplateColumns","borderRight","paddingLeft","alphabet","key","get","employeeItem","Date","dob","getUTCDate","monthName","getFullYear","EmployeeMonth","BirthSide","marginLeft","borderTop","employeesBirth","keys","monthId","months","Main","useState","Map","JSON","parse","localStorage","getItem","setEmployeesBirth","compare","a","b","getMonthId","month","monthCoeff","setLocalStorage","employeeMap","setItem","stringify","Array","from","entries","sortedEmployees","i","length","toLowerCase","has","set","updatedValue","push","sort","groupEmployeesBySurname","getMonth","filter","employeesList","employeeList","e","delete","val","values","size","arr","next","concat","getEmployeesId","Loading","axios","create","baseURL","responseType","App","setEmployees","loading","setLoading","useEffect","API","then","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dae6d14e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst EmptyEmployeesList = () => {\r\n    return (\r\n        <div>\r\n            <strong>.....</strong>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EmptyEmployeesList;","import React from \"react\";\n\nconst EmployeeItem = (props) => {\n    debugger;\n\n    const addEmployee = () => {\n        props.addEmployee(props.employee);\n    };\n\n    const removeEmployee = () => {\n        props.removeEmployee(props.employee);\n    };\n\n    const notActiveStyle = {\n        fontSize: \"1em\",\n        fontWeight: \"bold\",\n        color: \"black\",\n    };\n\n    const activeStyle = {\n        fontSize: \"1em\",\n        fontWeight: \"bold\",\n        color: \"blue\",\n    };\n\n    return (\n        <div>\n            <div style={props.active ? activeStyle : notActiveStyle}>\n                {props.employee.lastName} {props.employee.firstName}\n            </div>\n            <div>\n                <form>\n                    <div>\n                        <input\n                            type=\"radio\"\n                            value=\"not active\"\n                            name=\"gender\"\n                            onChange={removeEmployee}\n                            checked={!props.active}\n                        />{\" \"}\n                        <label>not active</label>\n                    </div>\n                    <div>\n                        <input\n                            type=\"radio\"\n                            value=\"active\"\n                            name=\"gender\"\n                            onChange={addEmployee}\n                            checked={props.active}\n                        />{\" \"}\n                        <label>active</label>\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n};\n\nexport default EmployeeItem;\n","import React from 'react';\r\nimport EmptyEmployeesList from \"./empty/EmptyEmployeesList\";\r\nimport EmployeeItem from \"./iter/EmployeeItem\";\r\n\r\nconst EmployeesList = (props) => {\r\n\r\n    console.log(props.employeesId.con)\r\n\r\n    debugger\r\n    if (!props.employees) {\r\n        return (\r\n            <EmptyEmployeesList/>\r\n        );\r\n    } else {\r\n        return (\r\n            !props.employees\r\n                ? <EmptyEmployeesList/>\r\n                : props.employees.map((employee) => (\r\n                    <EmployeeItem key={employee.id}\r\n                                  employee={employee}\r\n                                  addEmployee={props.addEmployee}\r\n                                  removeEmployee={props.removeEmployee}\r\n                                  active={props.employeesId.includes(employee.id)}\r\n                    />\r\n                ))\r\n        );\r\n    }\r\n};\r\n\r\nexport default EmployeesList;","import React from 'react';\r\nimport EmployeesList from \"./list/EmployeesList\";\r\nimport EmptyEmployeesList from \"./list/empty/EmptyEmployeesList\";\r\n\r\nconst Alphabet = (props) => {\r\n    return (\r\n        <div>\r\n            <h4>{props.letter.toUpperCase()}</h4>\r\n            <EmployeesList employees={props.employees}\r\n                           addEmployee={props.addEmployee}\r\n                           removeEmployee={props.removeEmployee}\r\n                           employeesId={props.employeesId}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Alphabet;","import React from \"react\";\nimport Alphabet from \"./alphabet/Alphabet\";\n\nconst EmployeeSide = (props) => {\n    return (\n        <div>\n            <div style={{display: \"flex\", justifyContent: \"center\"}}>\n                <h3>Employees</h3>\n            </div>\n            <div\n                style={{\n                    display: \"grid\",\n                    gridTemplateColumns: \"4fr 4fr 4fr\",\n                    borderRight: \"1px solid black\",\n                    paddingLeft: '5%'\n                }}\n            >\n                {props.alphabet.map((letter, key) => (\n                    <Alphabet\n                        key={key}\n                        letter={letter}\n                        employees={props.employees.get(letter)}\n                        addEmployee={props.addEmployee}\n                        removeEmployee={props.removeEmployee}\n                        employeesId={props.employeesId}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default EmployeeSide;\n","import React from 'react';\r\n\r\nconst EmployeeItem = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            {props.employeeItem.lastName} {props.employeeItem.firstName} - {new Date(props.employeeItem.dob).getUTCDate()} {props.monthName} {new Date(props.employeeItem.dob).getFullYear()}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EmployeeItem;","import React from \"react\";\nimport EmployeeItem from \"./item/EmployeeItem\";\n\nconst EmployeeMonth = (props) => {\n  return (\n    <div>\n      {props.monthName}\n      <ul>\n        {props.employees.map((employeeItem, key) => (\n          <li>\n            <EmployeeItem\n              key={key}\n              employeeItem={employeeItem}\n              monthName={props.monthName}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default EmployeeMonth;\n","import React from \"react\";\nimport EmployeeMonth from \"./employeeMonth/EmployeeMonth\";\n\nconst BirthSide = (props) => {\n    return (\n        <div>\n            <div style={{display: \"flex\", justifyContent: \"center\"}}>\n                <h3>Employees birthday</h3>\n            </div>\n\n            <div style={{marginLeft: \"10%\", borderTop: \"1px solid black\"}}>\n                {[...props.employeesBirth.keys()].map((monthId, key) => (\n                    <EmployeeMonth\n                        key={key}\n                        monthId={monthId}\n                        monthName={props.months.get(monthId)}\n                        employees={props.employeesBirth.get(monthId)}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default BirthSide;\n","import React from \"react\";\nimport EmployeeSide from \"./components/employee/EmployeeSide\";\nimport BirthSide from \"./components/birth/BirthSide\";\nimport {useState} from \"react\";\n\nconst Main = (props) => {\n\n    const [employeesBirth, setEmployeesBirth] = useState(\n        new Map(JSON.parse(localStorage.getItem(\"employeesData\")))\n    );\n\n    let employees = props.employees;\n\n    let alphabet = [\n        \"a\",\n        \"b\",\n        \"c\",\n        \"d\",\n        \"e\",\n        \"f\",\n        \"g\",\n        \"h\",\n        \"i\",\n        \"j\",\n        \"k\",\n        \"l\",\n        \"m\",\n        \"n\",\n        \"o\",\n        \"p\",\n        \"q\",\n        \"r\",\n        \"s\",\n        \"t\",\n        \"u\",\n        \"v\",\n        \"w\",\n        \"x\",\n        \"y\",\n        \"z\",\n    ];\n\n    let months = new Map([\n        [0, \"May\"],\n        [1, \"June\"],\n        [2, \"July\"],\n        [3, \"August\"],\n        [4, \"September\"],\n        [5, \"October\"],\n        [6, \"November\"],\n        [7, \"December\"],\n        [8, \"January\"],\n        [9, \"February\"],\n        [10, \"March\"],\n        [11, \"April\"],\n    ]);\n\n    const monthCoeff = 4;\n\n    const compare = (a, b) => {\n        if (a.lastName < b.lastName) return -1;\n        if (a.lastName > b.lastName) return 1;\n        return 0;\n    };\n\n    const getMonthId = (month) => {\n        let id = month <= 3 ? monthCoeff * 2 + month : month - monthCoeff;\n        return id;\n    };\n\n    // todo improve\n    const getEmployeesId = () => {\n        let val = employeesBirth.values()\n        let employeesId = [];\n        for (let i = 0; i < employeesBirth.size; i++) {\n            let arr = val.next().value.map(a => a.id)\n            employeesId = employeesId.concat(arr)\n        }\n        return employeesId;\n    }\n\n    const setLocalStorage = (employeeMap) => {\n        localStorage.setItem(\n            \"employeesData\",\n            JSON.stringify(Array.from(employeeMap.entries()))\n        );\n    };\n\n    // todo do better\n    const groupEmployeesBySurname = (employees) => {\n        let sortedEmployees = new Map();\n        for (let i = 0; i < employees.length; i++) {\n            let letter = employees[i].lastName[0].toLowerCase();\n            if (!sortedEmployees.has(letter)) {\n                sortedEmployees.set(letter, []);\n            }\n            let updatedValue = sortedEmployees.get(letter);\n            updatedValue.push(employees[i]);\n            updatedValue.sort(compare);\n            sortedEmployees.set(letter, updatedValue);\n        }\n        return new Map([...sortedEmployees.entries()].sort());\n    };\n\n    const addEmployee = (employee) => {\n        let employeeMap = new Map(employeesBirth);\n        let monthId = getMonthId(new Date(employee.dob).getMonth());\n        if (!employeeMap.get(monthId)) {\n            employeeMap.set(monthId, [employee]);\n        } else if (\n            employeeMap.get(monthId).filter((i) => i.id == employee.id).length == 0\n        ) {\n            debugger;\n            let employeesList = employeeMap.get(monthId);\n            employeesList.push(employee);\n            employeesList.sort(compare);\n            employeeMap.set(monthId, employeesList);\n        }\n        employeeMap = new Map([...employeeMap.entries()].sort());\n        setLocalStorage(employeeMap);\n        setEmployeesBirth(employeeMap);\n    };\n\n    const removeEmployee = (employee) => {\n        let employeeMap = new Map(employeesBirth);\n        let monthId = getMonthId(new Date(employee.dob).getMonth());\n        let employeeList = employeeMap.get(monthId);\n        if (!!employeeList) {\n            employeeList = employeeList.filter((e) => e.id != employee.id);\n            if (employeeList.length == 0) employeeMap.delete(monthId);\n            else employeeMap.set(monthId, employeeList);\n        }\n        setLocalStorage(employeeMap);\n        setEmployeesBirth(employeeMap);\n    };\n\n    return (\n        <div style={{display: \"grid\", gridTemplateColumns: \"7fr 5fr\"}}>\n            <div>\n                <EmployeeSide\n                    employees={groupEmployeesBySurname(employees)}\n                    alphabet={alphabet}\n                    addEmployee={addEmployee}\n                    removeEmployee={removeEmployee}\n                    employeesId={getEmployeesId()}\n                />\n            </div>\n\n            <div>\n                <BirthSide employeesBirth={employeesBirth} months={months}/>\n            </div>\n        </div>\n    );\n};\n\nexport default Main;\n","import React from 'react';\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div>\r\n            Loading\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loading;","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n    baseURL: \"https://yalantis-react-school-api.yalantis.com/api/task0/users\",\r\n    responseType: \"json\"\r\n});","import Main from \"./app/pages/main/Main\";\nimport {useState, useEffect} from \"react\";\nimport Loading from \"./app/pages/loading/Loading\";\nimport API from \"./app/utils/API\";\n\nfunction App() {\n    const [employees, setEmployees] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        API.get(\"/\").then(({data}) => {\n            setEmployees(data);\n            setLoading(false);\n        });\n    }, []);\n\n    return loading\n        ? <Loading/>\n        : <Main employees={employees}/>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}